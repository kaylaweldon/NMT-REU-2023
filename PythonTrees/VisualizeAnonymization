import plotly.graph_objects as go
from plotly.subplots import make_subplots
class newListTree:
    from Forest import Forest
    def __init__(self, trees):
        self.trees = trees
        self.fig = make_subplots(rows=1, cols=len(trees), shared_yaxes=True, horizontal_spacing=0.05)

    #checks brackets to determine how to structure the tree from a list
    def buildTree(self, tree):
        if not tree:  
            return {}
        
        node = {'children': []}
        child_str = ''
        level = 0
        for char in tree[1:]:
            if char == '[':
                level += 1
            elif char == ']':
                level -= 1
            if char == '[' and level == 1:
                child_str = ''
            elif char == ']' and level == 0:
                if child_str:
                    child = self.buildTree(child_str)
                    if child is not None:
                        node['children'].append(child)
                child_str = ''
            else:
                child_str += char

        if child_str:
            node['value'] = child_str

        return node

    # assigns (x, y) coordinates to each node in the tree
    def assign_coordinates(self, node, x=0, y=0, x_shift=1):
        node['x'] = x
        node['y'] = y
        if 'children' in node:
            total_children = len(node['children'])
            for i, child in enumerate(node['children']):
                x_child = x + (i - (total_children - 1) / 2) * x_shift
                self.assign_coordinates(child, x_child, y - 1, x_shift / total_children)

    # adds traces for drawing each trees nodes and edges
    def add_trace(self, node, row, col):
        if 'children' in node:
            for child in node['children']:
                # adds a trace for the edge between parent and each child
                self.fig.add_trace(go.Scatter(
                    x=[node['x'], child['x']],
                    y=[node['y'], child['y']],
                    mode='lines+text',
                    line=dict(color='black', width=1),
                    hoverinfo='none',
                    showlegend=False,
                ), row=row, col=col)
                # recursively adds trace for children
                self.add_trace(child, row, col)
        #adds trace for current node
        label = node.get('value', '')  
        self.fig.add_trace(go.Scatter(
            x=[node['x']],
            y=[node['y']],
            mode='markers+text', 
            marker=dict(size=20, color='blue'),
            text=label, 
            hoverinfo='none',
            showlegend=False,
        ), row=row, col=col)


    def visualize_trees(self):
        for i, tree in enumerate(self.trees):
            tree_dict = self.buildTree(tree)
            self.assign_coordinates(tree_dict)
            subplot = (1, i + 1)
            row, col = subplot
            self.add_trace(tree_dict, row = row, col = col)
            self.fig.update_xaxes(visible=False, showticklabels=False, row=row, col=col)
            self.fig.update_yaxes(visible=False, showticklabels=False, row= row, col=col)
        self.fig.update_layout(
            hovermode='closest',
            plot_bgcolor='rgb(255,255,255)',
        )
        self.fig.show()

    def listToString(self, lst): 
        result = ""
        if isinstance(lst, list):
            result += "["
            for item in lst:
                result += self.listToString(item) + ", "
            result = result.rstrip(", ") + "]"
        else:
            result += str(lst)
        return result

    def main(self):
        Forest = self.Forest()
        #Forest.generate_forest(7, 4, 4)
        niceForest = [['root1', ['h']], ['hey', ['i', ['am', ['home']]]], ['root2', ['hey'],['hey']], ['root3'], ['root4', ['l', ['j']], ['m']]]
        Forest.setForest(niceForest)
        print("original forest:")
        print(niceForest)

        treeList = []
        for i, tree in enumerate(niceForest):
            treeList.append(self.listToString(tree))
        
        anonymousForest = Forest.anonymize_forest_greedy() 
        print("anonymous forest greedy: ")
        anonymousList = []
        for i, tree in enumerate(anonymousForest[0]):
            anonymousList.append(self.listToString(tree))
        print(anonymousList)
        print("pairs:")
        print(anonymousForest[2])
        print("Edit distance for anonymous Forest greedy:")
        print(anonymousForest[1])
        
        anonymousForestBruteForce = Forest.anonymize_forest_brute_force() 
        print("anonymous forest brute force: ")
        anonymousListBF = []
        for i, tree in enumerate(anonymousForestBruteForce[0]):
            anonymousListBF.append(self.listToString(tree))
        print(anonymousListBF)
        print("Edit distance for anonymous Forest brute force:")
        print(anonymousForestBruteForce[1])

        original = newListTree(treeList)
        original.visualize_trees()
        anonymized = newListTree(anonymousList)
        anonymized.visualize_trees()
        anonymizedBF = newListTree(anonymousList)
        anonymizedBF.visualize_trees()


if __name__ == '__main__':
    newListTree([[]]).main()